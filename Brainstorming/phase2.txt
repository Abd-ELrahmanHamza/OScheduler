Phase 2: -

1- Process generator => Memory read - test generator => generate memory

# 2- memory.log

3- Tree datastructure
	struct  : left right parent
	methods : Search for memory
4- Allocate:- 
	memory* Allocate(process*,power of 2){
		Search for empty memory with the space of power of 2
		start from the root 
		
		if(space of root == pow2)
			return it
		else{
			setparent hasProcess = 1
			allocate 2 childeren
			Allocate(left child,pow2)
		}
	}

5- Deallocate
	Dallocate(memory*){	
		check for the sibling if it doesn't have a process merge them and edit parent
		then recursivly check the parent until their is no merge (Your sibling has a process or you are the root)
	}

6- Pow 2
7- Edit process structure (Add pointer to memory structure)
8- structure of memory
   int start - int end - int (ID)processID - bool hasProcess
======================================================================
NOTES:
	1- each parent should have hasProcess = true
=======================================================================
Phase 1: -
	1- perf.log


.perf

Utilization = runtime / currenttime
Avg WTA = sumWTA / # processes
Avg waiting  = sum of waiting time /# processes
Std WTA = 
